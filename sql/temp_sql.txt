


CREATE OR REPLACE PROCEDURE UPDATE_TOTAL_PURCHASE(C_ID IN VARCHAR2)
IS

CNTT NUMBER;
FOUND NUMBER;
BEGIN
	
	FOR R IN
	(
		SELECT C.PRODUCT_ID AS PRODUCT_ID, C.QUANTITY AS QUANTITY
		FROM CART C JOIN PRODUCT P
		ON C.PRODUCT_ID = P.PRODUCT_ID
		WHERE C.CART_ID = C_ID
	)
	LOOP
		
		BEGIN
			
			SELECT COUNT(*) INTO CNTT
			FROM TOTAL_PURCHASE;
			
			IF(CNTT > 0) THEN
			
				FOR K IN
				(
					SELECT PRODUCT_ID
					FROM TOTAL_PURCHASE
				)
				
				LOOP 
				  IF(K.PRODUCT_ID = R.PRODUCT_ID) THEN
							FOUND := 1;
					END IF;
				END LOOP;
				
				IF(FOUND = 1) THEN
					UPDATE TOTAL_PURCHASE SET CNT = CNT + R.QUANTITY
					WHERE PRODUCT_ID = R.PRODUCT_ID;
				ELSE
					INSERT INTO TOTAL_PURCHASE VALUES(R.PRODUCT_ID,R.QUANTITY);
				END IF;
				
			ELSE
				INSERT INTO TOTAL_PURCHASE VALUES(R.PRODUCT_ID,R.QUANTITY);
			END IF;
			
		END;
		
	END LOOP;
END;
/

BEGIN
	UPDATE_TOTAL_PURCHASE('1');
END;





CREATE OR REPLACE TRIGGER ORDER_TRIGGER
AFTER INSERT
ON ORDER_TABLE
FOR EACH ROW
DECLARE

O_ID VARCHAR2(100);
P_ID VARCHAR2(100);

BEGIN
	
	O_ID := :NEW.ORDER_ID;
	P_ID := :NEW.PERSON_ID;
	
	UPDATE CART SET CART_ID = O_ID 
	WHERE CART_ID IS NULL
	AND PERSON_ID = P_ID;
	
	

END;
/






CREATE OR REPLACE TRIGGER UPDATE_PRODUCT_TABLE
AFTER UPDATE
ON CART
FOR EACH ROW
DECLARE

QUAN NUMBER;
PRO_ID VARCHAR2(100);

BEGIN

	QUAN := :OLD.QUANTITY;
	PRO_ID := :OLD.PRODUCT_ID;
	
	IF(:NEW.CART_ID IS NOT NULL) THEN
		UPDATE PRODUCT SET QUANTITY = QUANTITY - QUAN, TOTAL_SALES = TOTAL_SALES + QUAN
		WHERE PRODUCT_ID = PRO_ID;
	END IF;
END;
/

--ALTER TRIGGER UPDATE_PRODUCT_TABLE DISABLE;


CREATE OR REPLACE TRIGGER ADD_SUBSCRIPTION_MODEL
AFTER INSERT
ON SUBSCRIPTION_PLAN
FOR EACH ROW
DECLARE
BEGIN
	INSERT INTO SUBSCRIPTION (SUBSCRIPTION_ID) VALUES (:NEW.SUBSCRIPTION_ID);
	INSERT INTO SUBSCRIPTION_HAS_BUNDLE (SUBSCRIPTION_ID) VALUES (:NEW.SUBSCRIPTION_ID);
END;
/



CREATE OR REPLACE TRIGGER DELETE_SUBSCRIPTION_MODEL
BEFORE DELETE
ON SUBSCRIPTION_PLAN
FOR EACH ROW
DECLARE
BEGIN
	DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION_ID = :OLD.SUBSCRIPTION_ID;
	DELETE FROM SUBSCRIPTION_HAS_BUNDLE WHERE SUBSCRIPTION_ID = :OLD.SUBSCRIPTION_ID;
END;
/






CREATE OR REPLACE PROCEDURE ADD_BUNDLE_TO_SUBSCRIPTION (S_ID IN VARCHAR2,B_ID IN VARCHAR2)
IS
FOUND NUMBER;

BEGIN

FOUND := 0;

FOR R IN(SELECT BUNDLE_ID FROM SUBSCRIPTION_HAS_BUNDLE WHERE SUBSCRIPTION_ID = S_ID)
	
	LOOP
	
		DBMS_OUTPUT.PUT_LINE(R.BUNDLE_ID);

		IF R.BUNDLE_ID IS NULL THEN
		
			FOUND := 1;
			
			EXIT; 
			
		END IF; 

	END LOOP;

IF(FOUND = 1) THEN
	BEGIN
		UPDATE SUBSCRIPTION_HAS_BUNDLE SET BUNDLE_ID = B_ID
		WHERE SUBSCRIPTION_ID = S_ID AND BUNDLE_ID IS NULL;
	END;
ELSE 
	BEGIN
		INSERT INTO SUBSCRIPTION_HAS_BUNDLE VALUES (S_ID, B_ID);
	END;
END IF;

END;
/

BEGIN
	ADD_BUNDLE_TO_SUBSCRIPTION('a2220e5ed861756ebaeae4d10c9666d3','100');
END;





CREATE OR REPLACE PROCEDURE ADD_USER_TO_SUBSCRIPTION (S_ID IN VARCHAR2,B_ID IN VARCHAR2)
IS

FOUND NUMBER;

BEGIN

FOUND := 0;

FOR R IN(SELECT BUYER_ID FROM SUBSCRIPTION WHERE SUBSCRIPTION_ID = S_ID)
	
	LOOP
	

		IF R.BUYER_ID IS NULL THEN
		
			FOUND := 1;
			
			EXIT; 
			
		END IF; 

	END LOOP;

IF(FOUND = 1) THEN
	BEGIN
		UPDATE SUBSCRIPTION SET BUYER_ID = B_ID
		WHERE SUBSCRIPTION_ID = S_ID AND BUYER_ID IS NULL;
	END;
ELSE 
	BEGIN
		INSERT INTO SUBSCRIPTION VALUES (S_ID, B_ID);
	END;
END IF;

END;
/
